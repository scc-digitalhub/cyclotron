#
cyclotronDirectives.directive 'map', ($window, $timeout) ->
    {
        restrict: 'C'
        #scope:
        
        link: (scope, element, attrs) ->
            map = null
            paramNames = []
            createMap = ->
                if not map?
                    $timeout ->             
                        #create map layers
                        mapLayers = []
                        _.each scope.layersToAdd, (layer) ->
                            options = scope.layerOptions[layer.type] #olClass, sources
                            layerConfig = {}
                            if layer.source?
                                configObj = if layer.source.configuration? then _.jsEval layer.source.configuration else {}
                                layerConfig.source = new options.sources[layer.source.name].srcClass(configObj)
                            mapLayers.push new options.olClass(layerConfig)

                        #create map view
                        mapView = new ol.View({
                            center: ol.proj.fromLonLat scope.center, 'EPSG:3857'
                            zoom: scope.zoom
                        })

                        #create map
                        map = new ol.Map({
                            target: attrs.id
                            layers: mapLayers
                            view: mapView
                        })
                        
                        #if there are overlays, create them and add them to the map
                        if scope.overlays? and scope.overlays.length > 0
                            for overlay in scope.overlays
                                if overlay.generation == 'inline'
                                    #get DOM element
                                    overlayElem = document.getElementById overlay.id
                                    #add click listener
                                    overlayElem.addEventListener 'click', ->
                                        group = this.getAttribute('group')
                                        if scope.groups[group].currentOverlay == this.id
                                            #either nothing happens or reset scope.groups[group].currentOverlay to ''
                                        else
                                            scope.groups[group].currentOverlay = this.id
                                    
                                    #add overlay to map
                                    config =
                                        element: overlayElem
                                    if overlay.position? then config.position = ol.proj.fromLonLat(overlay.position, 'EPSG:3857')
                                    if overlay.positioning? then config.positioning = overlay.positioning
                                    map.addOverlay(new ol.Overlay(config))

                        #if there are controls, create them and add them to the map

                        #parameters to be generated by the map
                        #if scope.sourceOfParams
                else
                    map.updateSize()
            
            createMap()
            
            #scope.$watch 'sliderconfig', (sliderconfig) ->
            
            # Update on window resizing
            resizeFunction = _.debounce createMap, 100, { leading: false, maxWait: 300 }
            $(window).on 'resize', resizeFunction

            # Cleanup
            scope.$on '$destroy', ->
                $(window).off 'resize', resizeFunction
                map = null
                #sliderElement.noUiSlider.destroy()
            
            return
    }
