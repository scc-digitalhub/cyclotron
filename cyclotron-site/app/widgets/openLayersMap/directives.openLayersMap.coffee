#
cyclotronDirectives.directive 'map', ($window) ->
    {
        restrict: 'C'
        #scope:
        
        link: (scope, element, attrs) ->
            map = null
            paramNames = []
            createMap = ->
                if not map?                    
                    #create map layers
                    mapLayers = []
                    _.each scope.layersToAdd, (layer) ->
                        options = scope.layerOptions[layer.type] #olClass, sources
                        layerConfig = {}
                        if layer.source?
                            configObj = if layer.source.configuration? then _.jsEval layer.source.configuration else {}
                            layerConfig.source = new options.sources[layer.source.name].srcClass(configObj)
                        mapLayers.push new options.olClass(layerConfig)

                    #create map view
                    mapView = new ol.View({
                        center: ol.proj.fromLonLat scope.center, 'EPSG:3857'
                        zoom: scope.zoom
                    })

                    #create map
                    map = new ol.Map({
                        target: attrs.id
                        layers: mapLayers
                        view: mapView
                    })
                    ###
                    #if there are overlays, create them and add them to the map
                    if scope.overlayGroups? and scope.overlayGroups.length > 0
                        #group = {name, cssClass, _cssClassSelected, overlays=[{id, _position, _positioning, generation}], overlaySelected}
                        #for each group overlays, create them with the specified class bound
                        for group in scope.overlayGroups
                            for overlay in group.overlays
                                if overlay.generation == 'inline'
                                    #create DOM element
                                    #if group.overlaySelected == overlay.id and group.cssClassSelected? then group.cssClassSelected else 
                                    ##{group.cssClass + ' ' + (if group.overlaySelected == overlay.id then group.cssClassSelected)}
                                    overlayElem = $( "<div id=\"#{overlay.id}\" ng-class=\"'ciao'\"></div>" )
                                    console.log overlayElem
                                    ###
                                    #overlayElem[0].addEventListener 'click', ->
                                        #TODO change group.overlaySelected to this.id
                                        #console.log 'clicked', this
                                        #TODO broadcast
                                    ###
                                    $(element).prepend overlayElem
                                    #add overlay to map
                                    config = {element: overlayElem.get (0)}
                                    if overlay.position? then config.position = ol.proj.fromLonLat(overlay.position, 'EPSG:3857')
                                    if overlay.positioning? then config.positioning = overlay.positioning
                                    map.addOverlay(new ol.Overlay(config))
                    ###

                    #if there are controls, create them and add them to the map

                    #parameters to be generated by the map
                    #if scope.sourceOfParams
                else
                    map.updateSize()
            
            createMap()
            
            #scope.$watch 'sliderconfig', (sliderconfig) ->
            
            # Update on window resizing
            resizeFunction = _.debounce createMap, 100, { leading: false, maxWait: 300 }
            $(window).on 'resize', resizeFunction

            # Cleanup
            scope.$on '$destroy', ->
                $(window).off 'resize', resizeFunction
                map = null
                #sliderElement.noUiSlider.destroy()
            
            return
    }
